name: SPFx CI/CD Pipeline

on:
  push:
    branches:
      - master  # or 'main' if your repo uses that

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v2

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.18.1'

      - name: 📦 Install Dependencies
        run: npm install

      - name: 🛠 Install Gulp
        run: npm install gulp gulp-cli

      - name: 🛠️ Bundle SPFx Code
        run: gulp bundle --ship

      - name: 📦 Package SPFx Solution
        run: gulp package-solution --ship

      - name: 💾 Upload SPPKG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: spfx-package
          path: sharepoint/solution/advanced-comments-box.sppkg

  deploy:
    runs-on: windows-latest
    needs: build

    steps:
      - name: 🧾 Checkout Code
        uses: actions/checkout@v2

      - name: 📥 Download SharePoint Package
        uses: actions/download-artifact@v4
        with:
          name: spfx-package
          path: sharepoint/solution/

      - name: 🚀 Deploy SPFx App to App Catalog (PowerShell)
        shell: pwsh
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          SPO_SITE_URL: ${{ secrets.SPO_SITE_URL }}
        run: |
          Install-Module PnP.PowerShell -Force -AllowClobber -Scope CurrentUser

          $url = $env:SPO_SITE_URL
          $clientId = $env:CLIENT_ID
          $clientSecret = $env:CLIENT_SECRET
          $tenantId = $env:TENANT_ID

          Write-Host "`n🧪 Verifying secrets..."
          if (!$url -or !$clientId -or !$clientSecret -or !$tenantId) {
            Write-Error "❌ One or more environment variables are empty. Please check GitHub secrets."
            exit 1
          }

          Write-Host "🌐 SPO_SITE_URL: $url"
          Write-Host "🔑 CLIENT_ID: $clientId"
          Write-Host "🏢 TENANT_ID: $tenantId"

          Write-Host "`n🔌 Connecting to SharePoint..."
          Connect-PnPOnline -Url $url -ClientId $clientId -ClientSecret $clientSecret -Tenant $tenantId

          Write-Host "✅ Connected to SharePoint."

          $appName = "advanced-comments-box"
          $package = Get-ChildItem "sharepoint/solution/*.sppkg" | Select-Object -First 1

          Write-Host "🔍 Checking if app is already deployed..."
          $existingApp = Get-PnPApp | Where-Object { $_.Title -eq $appName }

          if ($existingApp -and $existingApp.Deployed) {
            Write-Host "✅ App is already deployed. Skipping deployment."
            return
          }

          Write-Host "📦 Uploading and deploying app..."
          Add-PnPApp -Path $package.FullName -Scope Tenant -Publish -Overwrite
          Write-Host "🚀 Deployment complete."
